package br.com.ehmf.AppPessoas.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import br.com.ehmf.AppPessoas.model.Pessoa;
import br.com.ehmf.AppPessoas.repository.PessoaRepository;

@Service
public class PessoaService {

	@Autowired
	private PessoaRepository pessoaRepository;
	
	//CRUD 
	public Pessoa save(Pessoa pessoa) {
		//regra de negócio:
		//Se o campo nome está preenchido
		if(pessoa.getNome() == null) {
			System.out.print("Nome da Pessoa vazio.");
			return null;
			
		if(pessoa.getCidade() == null){
			System.out.print("Nome da Pessoa vazio.");
			return null;
		
		
        try {
        	return pessoaRepository.save(pessoa);
        }catch (Exception e){
        	System.out.println("Erro" +  
        	pessoa.toString()+ " : " + e.getMessage());
        	return null;
        }
		
		
		
		
	}
		//Read (leitura individual ou lista)
		public Optional<Pessoa> findById(Long id){
		 return pessoaRepository.findById(id);
		
		}
		
		public List<Pessoa> findAll(){
			return pessoaRepository.findAll();
		}
		//Update
		public Pessoa update(Pessoa pessoa) {
			//Verificar se a pessoa existe; se sim atualiza; se não insere novo
			//--- pesquisar protudo 
			Optional<Pessoa> findpessoas = pessoaRepository.findById(pessoa.getId());
			
			//se o pessoa existir, atualizar
			if(findpessoas.isPresent()) {
				//crio uma pessoa e lanço os dados 
				//do objeto que veio da internet(peremetro).
				Pessoa updpessoa + findpessoas.get());//setID
				updpessoas.setNome(pessoa.getNome());//veio por parametro
				updpessoas.setNome(pessoa.getC());//todos
				return pessoaRepository.save(uppessoas);//update
			}
			return pessoaRepository.save(pessoa);//insert
		}

		
		// Delete
		public void delete(Long id) {
			pessoaRepository.deleteById(id);
		}
	}
	}

